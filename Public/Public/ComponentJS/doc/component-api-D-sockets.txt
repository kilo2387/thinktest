##
##  ComponentJS -- Component System for JavaScript <http://componentjs.com>
##  Copyright (c) 2009-2016 Ralf S. Engelschall <http://engelschall.com>
##
##  This Source Code Form is subject to the terms of the Mozilla Public
##  License (MPL), version 2.0. If a copy of the MPL was not distributed
##  with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
##

Sockets
-------

Sockets are a special form of component Properties with callback functions as the values. They are intended to link
Views of child/descendant components into the View of a parent/ancestor component. In contrast to regular Properties,
Sockets are never resolved directly on the target component. Instead they always start to resolve on the parent
component because the sockets on the target component are intended for its child/ancestor components and not for the
target component itself. So, please remember to never plug a socket directly onto the target component!

- O<component>.M<socket>({
      [F<name>: T<String> = "default",]
      [F<scope>: T<Object> = null,]
      F<ctx>: T<Object>,
      F<plug>: T<Function>,
      F<unplug>: T<Function>
      [, F<spool>: T<String>]
  }): T<Number>;
  O<component>.M<socket>(
      P<ctx>: T<Object>,
      P<plug>: T<Function>,
      P<unplug>: T<Function>
  ): T<Number>

  Create a socket on O<component>, named F<name> and optionally
  scoped for the child component named F<scope>, where M<plug>()
  and M<unplug>() calls on child/ancestor components execute
  the supplied F<plug>/F<unplug> functions with F<ctx> supplied as
  C<this>, the F<object> parameter of M<plug>()/M<unplug>() as
  first argument and O<component> as the second argument.
  The M<socket>() method returns an id which uniquely identifies the socket.
  Instead of having to manually release the socket later via M<unsocket>()
  you can use the spool mechanism and spool the corresponding M<unsocket>()
  operation via option F<spool>.

  | var ui = $(...);
  | cs(this).socket({
  |     ctx:    ui,
  |     plug:   function (el) { $(this).append(el); },
  |     unplug: function (el) { $(el).remove(); }
  | })

- O<component>.M<unsocket>({ F<id>: T<Number> }): T<Void>;
  O<component>.M<unsocket>(P<id>: T<Number>): T<Void>

  Destroy the socket identified by F<id>, previously created by a call to M<socket>().
  This is usually done implicitly through the spooling mechanism.

  | cs(this).unsocket(id)

- O<component>.M<link>({
      [F<name>: T<String> = "default",]
      [F<scope>: T<Object> = null,]
      F<target>: T<Object>,
      F<socket>: T<String>
      [, F<spool>: T<String>]
  });
  O<component>.M<link>(
      P<target>: T<Object>,
      P<socket>: T<String>
  )

  Create a socket on O<component>, named F<name> and optionally
  scoped for the child component named F<scope>, and pass-through the
  M<plug>()/M<unplug>() calls to the target component F<target>
  and its socket named F<socket>. Usually used by Controller
  components to link their default socket (for the View below itself) to a
  particular socket of a parent component (because a View should be reusable
  and hence is not allowed to know the particular socket intended for it).
  The M<link>() method returns an id which uniquely identifies the linked socket.
  Instead of having to manually release the socket later via M<unlink>()
  you can use the spool mechanism and spool the corresponding M<unlink>()
  operation via option F<spool>.

  | cs(this).link({ name: "default", target: this, socket: "menu1" })

- O<component>.M<unlink>({ F<id>: T<Number> }): T<Void>;
  O<component>.M<unlink>(P<id>: T<Number>): T<Void>

  Destroy the linked socket identified by F<id>, previously created by a call to M<link>().
  This is usually done implicitly through the spooling mechanism.

  | cs(this).unlink(id)

- O<component>.M<plug>({
      [F<name>: T<String> = "default",]
      F<object>: T<Object>,
      [F<spool>: T<String>,]
      [F<targeting>: T<Boolean>]
  }): T<Number>;
  O<component>.M<plug>(P<object>: T<Object>): T<Number>

  Plugs F<object> into the socket named F<name> provided by any
  parent/ancestor component of O<component>. Optionally spool the
  corresponding M<unplug>() operation on spool F<spool> attached to O<component>.
  Optionally (in case of F<targeting> set to C<true>) start the
  operation on O<component> instead of its parent component.
  Returns an identifier for use with the corresponding M<unplug>() operation.

  | cs(this).plug({ object: ui, spool: "materialized" })

- O<component>.M<unplug>({ F<id>: T<Number>[, F<targeting>: T<Boolean>] }): T<Void>;
  O<component>.M<unplug>(P<id>: T<Number>): T<Void>

  Unplugs the object previously plugged under F<id> from the
  socket providing parent/ancestor component of O<component>.
  Optionally (in case of F<targeting> set to C<true>) start the
  operation on O<component> instead of its parent component.
  This is usually performed indirectly through the Spool mechanism.

  | cs(this).unplug(id)

