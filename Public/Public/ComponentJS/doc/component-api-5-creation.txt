##
##  ComponentJS -- Component System for JavaScript <http://componentjs.com>
##  Copyright (c) 2009-2016 Ralf S. Engelschall <http://engelschall.com>
##
##  This Source Code Form is subject to the terms of the Mozilla Public
##  License (MPL), version 2.0. If a copy of the MPL was not distributed
##  with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
##

Component Creation
------------------

Components are managed in hierarchical fashion within a component tree.
The component tree can be traversed and its components can be created,
looked up, state transitioned, communicated on and be destroyed.

- ComponentJS.M<create>(P<abs-tree-spec>: T<String>, P<class>: T<Class>[, ...]): T<Object>;
  ComponentJS.M<create>(P<base>: T<Component>, P<rel-tree-spec>: T<String>, P<class>: T<Class>[, ...]): T<Object>;
  O<component>.M<create>(P<rel-tree-spec>: T<String>, P<class>: T<Class>[, ...]): T<Object>

  Create one or more components. Their structure is specified by the
  absolute (P<abs-tree-spec>) or relative (P<rel-tree-spec>) tree specification
  which is string containing a set (C<{...}>) of slash-separated (C<.../...>) paths
  of component names. In other words, the specification has to follow the
  following grammar:

  + abs-tree-spec + ::= + "/" rel-tree-spec
  + rel-tree-spec + ::= + path | "C<{>" path ("C<,>" path)* "C<}>"
  + path          + ::= + rel-tree-spec | name ("/" name)*
  + name          + ::= + /C<^[^\/]+$>/

  For instance, the specification C<foo/{bar/baz,quux}> is the
  tree consisting of the two maximum length paths: C<foo/bar/baz> and C<foo/quux>.
  For each name from left-to-right in the tree specification you have to give
  either a to be instantiated class constructor (T<Function>) or an already
  instantiated object (T<Object>).

  The M<create>() method returns the last created component, i.e., the
  right-most component in the tree specification.

  | cs.create("/{sv,ui/{one,two}}", my.sv, {}, my.ui.one, my.ui.two);
  | cs.create(this, "model/view", model, view);
  | cs(this).create("model/view", model, view);

- ComponentJS.M<destroy>(P<abs-path>: T<String>): T<Void>;
  O<component>.M<destroy>(): T<Void>;
  O<component>.M<destroy>(): T<Void>

  Destroy the component uniquely identified by P<abs-path> or
  the O<component> on which this method is called upon.

  | cs.destroy("/foo/bar")
  | cs.destroy(comp, "foo/bar")
  | cs("/foo/bar").destroy()

