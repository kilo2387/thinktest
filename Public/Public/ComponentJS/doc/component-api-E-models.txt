##
##  ComponentJS -- Component System for JavaScript <http://componentjs.com>
##  Copyright (c) 2009-2016 Ralf S. Engelschall <http://engelschall.com>
##
##  This Source Code Form is subject to the terms of the Mozilla Public
##  License (MPL), version 2.0. If a copy of the MPL was not distributed
##  with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
##

Models
------

When using Model/View/Controller roles for components, the Model
component needs a so-called Presentation Model: an
abstraction of presentation onto which both View and Controller
components attach via Observer pattern. The Controller component
for provisioning business information into the Model and triggering
business services upon Model changes. The View component for
displaying the Model information and storing events into it.

- O<component>.M<model>(P<spec>: T<Object>): T<Object>

  Define a model through the specification in P<spec>. Each key
  is the name of a model element and the value has to be an T<Object> with
  the following possible fields: F<value> (T<Object>) for the default
  value, F<valid> (T<String>/T<RegExp>) for validating the values (based
  on the underlying validation language of the M<validate>() method), F<autoreset> (T<Boolean>) for
  indicating that on each value write, the value should be
  automatically reset to the initial F<value>, and F<store> (T<Boolean>) for
  indicating that the value should be persistently stored in the browser's C<localStorage>.
  Multiple calls to the M<model>() method on the same component incrementally
  add model elements.

  | cs(this).model({
  |     "param:realms":         { value: [],      valid: "[string*]" },
  |     "data:realm":           { value: "",      valid: "string", store: true },
  |     "data:username":        { value: "",      valid: "string", store: true },
  |     "data:password":        { value: "",      valid: "string" },
  |     "state:username":       { value: "empty", valid: "string" },
  |     "state:username-hint":  { value: "",      valid: "string" },
  |     "state:password":       { value: "empty", valid: "string" },
  |     "state:password-hint":  { value: "",      valid: "string" },
  |     "state:hashcode-col":   { value: 0,       valid: "number" },
  |     "state:hashcode-txt":   { value: "",      valid: "string" },
  |     "state:button-enabled": { value: false,   valid: "boolean" },
  |     "event:button-clicked": { value: false,   valid: "boolean", autoreset: true }
  | })

- O<component>.M<value>({
      F<name>: T<String>,
      [F<op>: T<String>,]
      [F<value>: T<Object>,]
      [F<force>: T<Boolean>,]
      [F<injected>: T<Boolean>]
  });
  O<component>.M<value>(
      P<name>: T<String>,
      [P<value>: T<Object>,]
      [P<force>: T<Boolean>]
  )

  Get the value of O<component>'s model element named F<name> or
  set the value of O<component>'s model element named F<name> to F<value>.
  As each value change causes observers to be triggered, by default
  changing a value to the same value does not trigger anything.
  But if F<force> is C<true> even setting a model element to its
  current value triggers observers.
  Setting the option F<injected> to C<true> should be done by plugins
  only and prevents model value observers from rejecting the (already
  injected) value.

  | var val = cs(this).value("foo")
  | cs(this).value("foo", "bar")

  If you store arbitrary sub-structured values, you can make
  F<name> a path full specification based on the language supported
  by the M<select>() method:

  | var val = cs(this).value("foo.bar[1].baz['the-quux'])
  | cs(this).value("foo.bar[1].baz['the-quux']", "bar")

  In addition to the basic get/set operations on scalar values,
  you can also use array and hash operations on collections
  by using the F<op> option. Supported F<op>
  values are C<"get">, C<"set">, C<["splice",>offsetC<,>removeC<]>,
  C<"delete">, C<"push">, C<"pop">, C<"unshift"> and C<"shift">.
  The last four array operations are internally translated to the
  corresponding C<splice> operation. The arguments to the C<splice>
  operation are the same as for JavaScript's C<Array.prototype.splice>:
  "offset" is the 0-based offset into the array to operate at and
  "remove" is the number of elements to remove at "offset" (before
  the F<value> is added). The operations C<get>/C<set>/C<delete>
  operate on collection elements while the operations
  C<splice>/C<push>/C<pop>/C<unshift>/C<shift> operate on
  collections, hence you have to provide a path in F<name> which is suitable for them.
  The operations C<get>/C<set>/C<delete> can operate on both array and
  hash elements while C<splice>/C<push>/C<pop>/C<unshift>/C<shift> can operate on
  array objects only.

  To illustrate the functionality see the following comparisons
  between the standard JavaScript variable access code and the ComponentJS
  model value access code.

  First, working with scalars:

  | //  val = foo.bar
  | val = cs(this).value("foo.bar")
  | val = cs(this).value({ name: "foo.bar", op: "get" })
  | 
  | //  foo.bar = "quux"
  | cs(this).value("foo.bar", "quux")
  | cs(this).value({ name: "foo.bar", op: "set", value: "quux" })

  Second, working with Arrays:

  | //  foo.bar = []
  | cs(this).value("foo.bar", [])
  | cs(this).value({ name: "foo.bar", value: [] })
  | 
  | //  len = foo.bar.length
  | len = cs(this).value("foo.bar").length
  | 
  | //  val = foo.bar[42]
  | val = cs(this).value("foo.bar[42]")
  | val = cs(this).value({ name: "foo.bar[42]", op: "get" })
  | 
  | //  foo.bar[42] = "quux"
  | cs(this).value("foo.bar[42]", "quux")
  | cs(this).value({ name: "foo.bar[42]", op: "set", value: "quux" })
  | 
  | //  foo.bar.splice(1, 0, "quux")
  | cs(this).value({ name: "foo.bar", op: [ "splice", 1, 0 ], value: "quux" })
  | 
  | //  foo.bar.push("foo")
  | cs(this).value({ name: "foo.bar", op: "push", value: "foo" })
  | 
  | //  val = foo.bar.pop()
  | val = cs(this).value({ name: "foo.bar", op: "pop" })
  | 
  | //  foo.bar.unshift("bar")
  | cs(this).value({ name: "foo.bar", op: "unshift", value: "bar" })
  | 
  | //  val = foo.bar.shift()
  | val = cs(this).value({ name: "foo.bar", op: "shift" })

  Third, working with hashes:

  | //  foo.bar = {}
  | cs(this).value("foo.bar", {})
  | cs(this).value({ name: "foo.bar", value: {} })
  | 
  | //  keys = Object.keys(foo.bar)
  | keys = Object.keys(cs(this).value("foo.bar"))
  | 
  | //  val = foo.bar.baz
  | //  val = foo.bar["baz"]
  | val = cs(this).value("foo.bar.baz")
  | val = cs(this).value("foo.bar['baz']")
  | val = cs(this).value({ name: "foo.bar.baz",    op: "get" })
  | val = cs(this).value({ name: "foo.bar['baz']", op: "get" })
  | 
  | //  foo.bar.baz = "quux"
  | //  foo.bar["baz"] = "quux"
  | cs(this).value("foo.bar.baz",    "quux")
  | cs(this).value("foo.bar['baz']", "quux")
  | cs(this).value({ name: "foo.bar.baz",    op: "set", value: "quux" })
  | cs(this).value({ name: "foo.bar['baz']", op: "set", value: "quux" })
  | 
  | //  delete foo.bar.baz
  | //  delete foo.bar["baz"]
  | cs(this).value({ name: "foo.bar.baz",    op: "delete" })
  | cs(this).value({ name: "foo.bar['baz']", op: "delete" })

- O<component>.M<touch>({
      F<name>: T<String>,
  });
  O<component>.M<touch>(
      P<name>: T<String>
  )

  Touches the value of O<component>'s model element named F<name>,
  without changing the value but with triggering all its "set" observers
  (its "changed" observers are not triggered). This can be useful for
  firing "set" observers manually.

  | cs(this).touch("foo")

- O<component>.M<observe>({
      F<name>: T<String>,
      F<func>: T<Function>,
      [F<touch>: T<Boolean> = false,]
      [F<boot>: T<Boolean> = false,]
      [F<op>: T<String> = "set",]
      [F<spool>: T<String> = null,]
      [F<noevent>: T<Boolean> = false]
  }): T<Number>;
  O<component>.M<observe>(
      F<name>: T<String>,
      F<func>: T<Function>
  ): T<Number>

  Observe the value of O<component>'s model element named F<name>
  for F<op> operations (by default "set" operations).
  For "get" operations, the callback function F<func> has to be of
  signature F<func>(P<ev>: T<Event>, P<value>: T<Object>): T<Void>.
  For "set" (and "splice", "delete", "push", "pop", "unshift", "shift")
  and "changed" operations, the callback function F<func> has to be
  of signature F<func>(P<ev>: T<Event>, P<value-new>: T<Object>,
  P<value-old>: T<Object>, P<op>: T<Object>, P<path>: T<String>):
  T<Void>. Both types of callbacks can override the value by using
  P<ev>.M<result>(P<value>). The M<observe>() method returns an id which
  uniquely identifies the observation. Instead of having to manually
  release the observation later via M<unobserve>() you can use the spool
  mechanism and spool the corresponding M<unobserve>() operation via
  F<spool>. Option F<noevent> (similar to the same option for M<subscribe>())
  prevents the passing of the event parameter P<ev> to the callback function
  F<func> in case you don't need it. Option F<touch> causes M<observe>()
  to execute M<touch>() internally at the end of its observation
  registration operation for bootstrapping purposes. This indirectly
  causes the callback function F<func> (and also all other observers) to
  execute. Option F<boot> causes M<observe>() to execute the callback
  function F<func> once at the end of its observation registration
  operation for bootstrapping purposes. This explicitly causes the
  callback function F<func> (and only F<func> and no other observers) to
  excecute.

  | id = cs(this).observe("state:username", function (ev, username) {
  |     ...
  | })

- O<component>.M<unobserve>({ F<id>: T<Number> }): T<Void>;
  O<component>.M<unobserve>(P<id>: T<Number>): T<Void>

  Release the observation identified by F<id>, previously acquired by a call to M<observe>().
  This is usually done implicitly through the spooling mechanism.

  | cs(this).unobserve(id)

